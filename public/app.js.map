{"version":3,"sources":["webpack://lazy-compile/./src/server.js","webpack://lazy-compile/external \"@babel/polyfill\"","webpack://lazy-compile/external \"express\"","webpack://lazy-compile/external \"fs\"","webpack://lazy-compile/external \"path\"","webpack://lazy-compile/webpack/bootstrap","webpack://lazy-compile/webpack/startup"],"names":["express","require","path","fs","app","port","html","console","log","get","req","res","next","send","readFile","join","__dirname","err","content","listen"],"mappings":";;;;;;;;;;AAAA,MAAMA,OAAO,GAAGC,mBAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMC,IAAI,GAAGD,mBAAO,CAAC,kBAAD,CAApB;;AAEA,MAAME,EAAE,GAAGF,mBAAO,CAAC,cAAD,CAAlB;;AAEA,MAAMG,GAAG,GAAGJ,OAAO,EAAnB;AAEA,MAAMK,IAAI,GAAG,IAAb;AAEA,IAAIC,IAAJ;AAEAC,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAEAJ,GAAG,CAACK,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC/B;AACA,MAAIN,IAAJ,EAAU;AACRK,OAAG,CAACE,IAAJ,CAASP,IAAT;AACD,GAFD,MAEO;AACLH,MAAE,CAACW,QAAH,CAAYZ,IAAI,CAACa,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,YAA/B,CAAZ,EAA0D,MAA1D,EAAkE,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAClF,UAAID,GAAJ,EAAS;AACPL,YAAI,CAACK,GAAD,CAAJ;AACD,OAFD,MAEO;AACLX,YAAI,GAAGY,OAAP;AACAP,WAAG,CAACE,IAAJ,CAASK,OAAT;AACD;AACF,KAPD;AAQD;AACF,CAdD;AAgBAd,GAAG,CAACe,MAAJ,CAAWd,IAAX,EAAiB,MAAM;AACrBE,SAAO,CAACC,GAAR,CAAa,6CAA4CH,IAAK,EAA9D;AACD,CAFD,E;;;;;;;;;;;AC7BA,4C;;;;;;;;;;;ACAA,oC;;;;;;;;;;;ACAA,+B;;;;;;;;;;;ACAA,iC;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UCtBA;UACA;UACA;UACA;UACA","file":"app.js","sourcesContent":["const express = require('express')\nconst path = require('path')\n\nconst fs = require('fs')\n\nconst app = express()\n\nconst port = 3000\n\nlet html\n\nconsole.log('sssssssssss2s1ss2ssss')\n\napp.get('*', (req, res, next) => {\n  // res.sendFile(__dirname + '/public/index.html')\n  if (html) {\n    res.send(html)\n  } else {\n    fs.readFile(path.join(__dirname, 'public', 'index.html'), 'utf8', (err, content) => {\n      if (err) {\n        next(err)\n      } else {\n        html = content\n        res.send(content)\n      }\n    })\n  }\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n","module.exports = require(\"@babel/polyfill\");","module.exports = require(\"express\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\n__webpack_require__(\"@babel/polyfill\");\nvar __webpack_exports__ = __webpack_require__(\"./src/server.js\");\n"],"sourceRoot":""}